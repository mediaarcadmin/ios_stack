/** \file
 *  This C header file was generated by $ANTLR version 3.2 Sep 23, 2009 12:02:23
 *
 *     -  From the grammar source file : css21.g
 *     -                            On : 2009-11-10 12:39:12
 *     -                for the parser : css21ParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser css21Parser has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pcss21Parser, which is returned from a call to css21ParserNew().
 *
 * The methods in pcss21Parser are  as follows:
 *
 *  - css21Parser_styleSheet_return      pcss21Parser->styleSheet(pcss21Parser)
 *  - css21Parser_charSet_return      pcss21Parser->charSet(pcss21Parser)
 *  - css21Parser_imports_return      pcss21Parser->imports(pcss21Parser)
 *  - css21Parser_media_return      pcss21Parser->media(pcss21Parser)
 *  - css21Parser_medium_return      pcss21Parser->medium(pcss21Parser)
 *  - css21Parser_bodylist_return      pcss21Parser->bodylist(pcss21Parser)
 *  - css21Parser_bodyset_return      pcss21Parser->bodyset(pcss21Parser)
 *  - css21Parser_page_return      pcss21Parser->page(pcss21Parser)
 *  - css21Parser_pseudoPage_return      pcss21Parser->pseudoPage(pcss21Parser)
 *  - css21Parser_operator_return      pcss21Parser->operator(pcss21Parser)
 *  - css21Parser_combinator_return      pcss21Parser->combinator(pcss21Parser)
 *  - css21Parser_unaryOperator_return      pcss21Parser->unaryOperator(pcss21Parser)
 *  - css21Parser_property_return      pcss21Parser->property(pcss21Parser)
 *  - css21Parser_ruleSet_return      pcss21Parser->ruleSet(pcss21Parser)
 *  - css21Parser_declarationList_return      pcss21Parser->declarationList(pcss21Parser)
 *  - css21Parser_selector_return      pcss21Parser->selector(pcss21Parser)
 *  - css21Parser_simpleSelector_return      pcss21Parser->simpleSelector(pcss21Parser)
 *  - css21Parser_esPred_return      pcss21Parser->esPred(pcss21Parser)
 *  - css21Parser_elementSubsequent_return      pcss21Parser->elementSubsequent(pcss21Parser)
 *  - css21Parser_cssClass_return      pcss21Parser->cssClass(pcss21Parser)
 *  - css21Parser_elementName_return      pcss21Parser->elementName(pcss21Parser)
 *  - css21Parser_attrib_return      pcss21Parser->attrib(pcss21Parser)
 *  - css21Parser_pseudo_return      pcss21Parser->pseudo(pcss21Parser)
 *  - css21Parser_declaration_return      pcss21Parser->declaration(pcss21Parser)
 *  - css21Parser_prio_return      pcss21Parser->prio(pcss21Parser)
 *  - css21Parser_expr_return      pcss21Parser->expr(pcss21Parser)
 *  - css21Parser_term_return      pcss21Parser->term(pcss21Parser)
 *  - css21Parser_hexColor_return      pcss21Parser->hexColor(pcss21Parser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_css21Parser_H
#define _css21Parser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */
 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct css21Parser_Ctx_struct css21Parser, * pcss21Parser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */
typedef struct css21Parser_styleSheet_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    css21Parser_styleSheet_return;

typedef struct css21Parser_charSet_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    css21Parser_charSet_return;

typedef struct css21Parser_imports_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    css21Parser_imports_return;

typedef struct css21Parser_media_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    css21Parser_media_return;

typedef struct css21Parser_medium_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    css21Parser_medium_return;

typedef struct css21Parser_bodylist_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    css21Parser_bodylist_return;

typedef struct css21Parser_bodyset_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    css21Parser_bodyset_return;

typedef struct css21Parser_page_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    css21Parser_page_return;

typedef struct css21Parser_pseudoPage_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    css21Parser_pseudoPage_return;

typedef struct css21Parser_operator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    css21Parser_operator_return;

typedef struct css21Parser_combinator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    css21Parser_combinator_return;

typedef struct css21Parser_unaryOperator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    css21Parser_unaryOperator_return;

typedef struct css21Parser_property_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    css21Parser_property_return;

typedef struct css21Parser_ruleSet_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    css21Parser_ruleSet_return;

typedef struct css21Parser_declarationList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    css21Parser_declarationList_return;

typedef struct css21Parser_selector_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    css21Parser_selector_return;

typedef struct css21Parser_simpleSelector_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    css21Parser_simpleSelector_return;

typedef struct css21Parser_esPred_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    css21Parser_esPred_return;

typedef struct css21Parser_elementSubsequent_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    css21Parser_elementSubsequent_return;

typedef struct css21Parser_cssClass_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    css21Parser_cssClass_return;

typedef struct css21Parser_elementName_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    css21Parser_elementName_return;

typedef struct css21Parser_attrib_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    css21Parser_attrib_return;

typedef struct css21Parser_pseudo_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    css21Parser_pseudo_return;

typedef struct css21Parser_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    css21Parser_declaration_return;

typedef struct css21Parser_prio_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    css21Parser_prio_return;

typedef struct css21Parser_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    css21Parser_expr_return;

typedef struct css21Parser_term_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    css21Parser_term_return;

typedef struct css21Parser_hexColor_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    css21Parser_hexColor_return;



/** Context tracking structure for css21Parser
 */
struct css21Parser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;


     css21Parser_styleSheet_return (*styleSheet)	(struct css21Parser_Ctx_struct * ctx);
     css21Parser_charSet_return (*charSet)	(struct css21Parser_Ctx_struct * ctx);
     css21Parser_imports_return (*imports)	(struct css21Parser_Ctx_struct * ctx);
     css21Parser_media_return (*media)	(struct css21Parser_Ctx_struct * ctx);
     css21Parser_medium_return (*medium)	(struct css21Parser_Ctx_struct * ctx);
     css21Parser_bodylist_return (*bodylist)	(struct css21Parser_Ctx_struct * ctx);
     css21Parser_bodyset_return (*bodyset)	(struct css21Parser_Ctx_struct * ctx);
     css21Parser_page_return (*page)	(struct css21Parser_Ctx_struct * ctx);
     css21Parser_pseudoPage_return (*pseudoPage)	(struct css21Parser_Ctx_struct * ctx);
     css21Parser_operator_return (*operator)	(struct css21Parser_Ctx_struct * ctx);
     css21Parser_combinator_return (*combinator)	(struct css21Parser_Ctx_struct * ctx);
     css21Parser_unaryOperator_return (*unaryOperator)	(struct css21Parser_Ctx_struct * ctx);
     css21Parser_property_return (*property)	(struct css21Parser_Ctx_struct * ctx);
     css21Parser_ruleSet_return (*ruleSet)	(struct css21Parser_Ctx_struct * ctx);
     css21Parser_declarationList_return (*declarationList)	(struct css21Parser_Ctx_struct * ctx);
     css21Parser_selector_return (*selector)	(struct css21Parser_Ctx_struct * ctx);
     css21Parser_simpleSelector_return (*simpleSelector)	(struct css21Parser_Ctx_struct * ctx);
     css21Parser_esPred_return (*esPred)	(struct css21Parser_Ctx_struct * ctx);
     css21Parser_elementSubsequent_return (*elementSubsequent)	(struct css21Parser_Ctx_struct * ctx);
     css21Parser_cssClass_return (*cssClass)	(struct css21Parser_Ctx_struct * ctx);
     css21Parser_elementName_return (*elementName)	(struct css21Parser_Ctx_struct * ctx);
     css21Parser_attrib_return (*attrib)	(struct css21Parser_Ctx_struct * ctx);
     css21Parser_pseudo_return (*pseudo)	(struct css21Parser_Ctx_struct * ctx);
     css21Parser_declaration_return (*declaration)	(struct css21Parser_Ctx_struct * ctx);
     css21Parser_prio_return (*prio)	(struct css21Parser_Ctx_struct * ctx);
     css21Parser_expr_return (*expr)	(struct css21Parser_Ctx_struct * ctx);
     css21Parser_term_return (*term)	(struct css21Parser_Ctx_struct * ctx);
     css21Parser_hexColor_return (*hexColor)	(struct css21Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred1_css21)	(struct css21Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred2_css21)	(struct css21Parser_Ctx_struct * ctx);
    // Delegated rules
    const char * (*getGrammarFileName)();
    void	    (*free)   (struct css21Parser_Ctx_struct * ctx);
    /* @headerFile.members() */
    pANTLR3_BASE_TREE_ADAPTOR	adaptor;
    pANTLR3_VECTOR_FACTORY		vectors;
    /* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pcss21Parser css21ParserNew         (pANTLR3_COMMON_TOKEN_STREAM instream);
ANTLR3_API pcss21Parser css21ParserNewSSD      (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the parser will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define STAR      30
#define MEDIUM      5
#define LBRACE      18
#define MEDIA      17
#define CHARSET      11
#define EOF      -1
#define DECLARATION      7
#define LPAREN      35
#define LENGTH      40
#define LBRACKET      29
#define INCLUDES      32
#define TIME      44
#define RPAREN      36
#define NAME      52
#define IMPORT      14
#define SELECTOR      6
#define GREATER      25
#define ESCAPE      49
#define COMMA      16
#define IDENT      20
#define DIMENSION      85
#define PLUS      24
#define FREQ      45
#define NL      86
#define RBRACKET      34
#define COMMENT      80
#define DOT      28
#define D      57
#define E      58
#define F      59
#define G      60
#define A      54
#define B      55
#define RBRACE      19
#define ANGLE      43
#define C      56
#define L      65
#define M      66
#define NMCHAR      51
#define N      67
#define O      68
#define H      61
#define I      62
#define J      63
#define DECLARATIONLIST      8
#define K      64
#define NUMBER      38
#define U      74
#define HEXCHAR      46
#define HASH      27
#define T      73
#define W      76
#define V      75
#define Q      70
#define P      69
#define S      72
#define CDO      81
#define R      71
#define VALUE      10
#define MINUS      26
#define SOLIDUS      23
#define SEMI      13
#define CDC      82
#define Y      78
#define URL      53
#define UNICODE      48
#define PERCENTAGE      39
#define X      77
#define IMPORTANT      37
#define Z      79
#define URI      15
#define COLON      22
#define NOTVALID      83
#define WS      84
#define NMSTART      50
#define PAGE      21
#define DASHMATCH      33
#define OPEQ      31
#define PROPERTY      9
#define EMS      41
#define EXS      42
#define NONASCII      47
#define RULESET      4
#define STRING      12
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for css21Parser
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>Unknown</title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="DC.Title" content="Unknown"/>
    <style type="text/css">body { margin: 0%;padding: 0%;} .cover { text-align: center;margin-left: 0%;margin-right: 0%;} .coverpage { text-align: center;vertical-align: middle;text-shadow: #000 0px 1px 1px;margin-left: 0px;margin-right: 0px;margin-top: 0px;padding-top: 3em;margin-botton: 3em;font-size: 3.0em;background: #2F4F4F;} .coverimg { margin-top: 0%;margin-left: 0%;margin-right: 0%;width: 100%;} p { margin-left: 1em;margin-right: 1em;text-align: justify;} span { margin-top: 0%;margin-bottom: 0%;margin-left: 1em;margin-right: 1em;text-align: justify;text-indent: 1.5em;} div { margin-top: 0%;margin-bottom: 0%;margin-left: 1em;margin-right: 1em;text-align: justify;text-indent: 1.5em;} p { margin-top: 0%;margin-bottom: 0%;margin-left: 1em;margin-right: 1em;text-align: justify;text-indent: 1.5em;} blockquote { margin-top: 0%;margin-bottom: 0%;margin-left: 1em;margin-right: 1em;text-align: justify;text-indent: 1.5em;} h1 { text-align: center;} h2 { text-align: center;} h3 { text-align: center;} h4 { text-align: center;} h5 { text-align: center;} h6 { text-align: center;}</style>
  </head>
  <body>
    <div>
      <h1>Unknown</h1>
    </div>
    <div>
      <p>48927_FMXX_Hunter.qxd  10/20/08  10:15 AM  Page</p>
      <p>Geometry
Geometry with an Introduction to Cosmic Topology
Hitchman (978-0-7637-5457-0) © 2009
Euclidean and Transformational Geometry: A Deductive
Inquiry
Libeskind (978-0-7637-4366-6) © 2008
A Gateway to Modern Geometry: The Poincaré Half-Plane,
Second Edition
Stahl (978-0-7637-5381-8) © 2008
Understanding Modern Mathematics
Stahl (978-0-7637-3401-5) © 2007
Lebesgue Integration on Euclidean Space, Revised Edition
Jones (978-0-7637-1708-7) © 2001
Precalculus
Precalculus with Calculus Previews (Expanded Volume),
Fourth Edition
Zill/Dewar (978-0-7637-6631-3) © 2010
Precalculus: A Functional Approach to Graphing and Problem
Solving, Sixth Edition 
Smith (978-0-7637-5177-7) © 2010
Precalculus with Calculus Previews (Essentials Version),
Fourth Edition
Zill/Dewar (978-0-7637-3779-5) © 2007
Calculus
Calculus of a Single Variable: Early Transcendentals, Fourth
Edition 
Zill/Wright (978-0-7637-4965-1) © 2010
Multivariable Calculus, Fourth Edition 
Zill/Wright (978-0-7637-4966-8) © 2010
Calculus: Early Transcendentals, Fourth Edition  
Zill/Wright (978-0-7637-5995-7) © 2010
Exploring Calculus with MATLAB: Topics and Applications
Smaldone (978-0-7637-7002-0) © 2010
Calculus: The Language of Change
Cohen/Henle (978-0-7637-2947-9) © 2005
Applied Calculus for Scientists and Engineers
Blume (978-0-7637-2877-9) © 2005
Calculus: Labs for Mathematica
O’Connor (978-0-7637-3425-1) © 2005
Calculus: Labs for MATLAB
O’Connor (978-0-7637-3426-8) © 2005
Linear Algebra
Linear Algebra: Theory and Applications
Cheney/Kincaid (978-0-7637-5020-6) © 2009
Linear Algebra with Applications, Sixth Edition
Williams (978-0-7637-5753-3) © 2008
Advanced Engineering Mathematics
An Elementary Course in Partial Differential Equations,
Second Edition 
Amaranath (978-0-7637-6244-5) © 2009
Advanced Engineering Mathematics, Third Edition
Zill/Cullen (978-0-7637-4591-2) © 2006
Complex Analysis
A First Course in Complex Analysis with Applications, Second
Edition
Zill/Shanahan (978-0-7637-5772-4) © 2009
Complex Analysis for Mathematics and Engineering,
Fifth Edition
Mathews/Howell (978-0-7637-3748-1) © 2006
Classical Complex Analysis
Hahn (978-0-8672-0494-0) © 1996
Real Analysis
Closer and Closer: Introducing Real Analysis
Schumacher (978-0-7637-3593-7) © 2008
The Way of Analysis, Revised Edition
Strichartz (978-0-7637-1497-0) © 2000
Topology
Foundations of Topology, Second Edition
Patty (978-0-7637-4234-8) © 2009
Discrete Math and Logic
Discrete Structures, Logic, and Computability, Third Edition
Hein (978-0-7637-7206-2) © 2010
Essentials of Discrete Mathematics 
Hunter (978-0-7637-4892-0) © 2009
Logic, Sets, and Recursion, Second Edition
Causey (978-0-7637-3784-9) © 2006
Numerical Methods
Numerical Mathematics
Grasselli/Pelinovsky (978-0-7637-3767-2) © 2008
Exploring Numerical Methods: An Introduction to Scientific
Computing Using MATLAB
Linz (978-0-7637-1499-4) © 2003
Advanced Mathematics
Clinical Statistics: Introducing Clinical Trials, Survival
Analysis, and Longitudinal Data Analysis
Korosteleva (978-0-7637-5850-9) © 2009
Harmonic Analysis: A Gentle Introduction
DeVito (978-0-7637-3893-8) © 2007
Beginning Number Theory, Second Edition
Robbins (978-0-7637-3768-9) © 2006
A Gateway to Higher Mathematics
Goodfriend (978-0-7637-2733-8) © 2006
The Jones and Bartlett Publishers Series in Mathematics
For more information on any of the titles above please visit us online at http://www.jbpub.com/math. Qualified instruc-
tors, contact your Publisher’s Representative at 1-800-832-0034 or info@jbpub.com to request review copies for
course consideration.
48927_FMXX_Hunter.qxd  10/20/08  10:15 AM  Page</p>
      <p>48927_FMXX_Hunter.qxd  10/20/08  10:15 AM  Page</p>
      <p>Jones and Bartlett’s books and products are available through most bookstores and online booksellers. To contact
Jones and Bartlett Publishers directly, call 800-832-0034, fax 978-443-8000, or visit our website
www.jbpub.com.
Substantial discounts on bulk quantities of Jones and Bartlett’s publications are available to corporations, pro-
fessional associations, and other qualified organizations. For details and specific discount information, con-
tact the special sales department at Jones and Bartlett via the above contact information or send an email to
specialsales@jbpub.com.
Copyright © 2009 by Jones and Bartlett Publishers, LLC
All rights reserved. No part of the material protected by this copyright may be reproduced or utilized in any form,
electronic or mechanical, including photocopying, recording, or by any information storage and retrieval system,
without written permission from the copyright owner.
Production Credits
Acquisitions Editor: Timothy Anderson
Editorial Assistant: Melissa Potter
Production Director: Amy Rose
Production Manager: Jennifer Bagdigian
Production Editor: Katherine Macdonald
Senior Marketing Manager: Andrea DeFronzo
V.P., Manufacturing and Inventory Control: Therese Connell
Composition: Northeast Compositors, Inc.
Cover Design: Brian Moore/Kristin E. Ohlin
Interior Images: All photographs, excepting Figure 3.2, courtesy of David J. Hunter. Figure 3.2 courtesy of Pau
Atela and Christophe Golé (www.math.smith.edu/phyllo). Technical illustrations by George Nichols.
Cover Image: Image courtesy of David J. Hunter.
Printing and Binding: Malloy, Inc.
Cover Printing: Malloy, Inc.
Library of Congress Cataloging-in-Publication Data
Hunter, David J. (David James), 1968–
Essentials of discrete mathematics / David J. Hunter.
p. cm.
Includes bibliographical references and index.
ISBN-13: 978-0-7637-4892-0 (cloth)
ISBN-10: 0-7637-4892-7 (cloth)
1.  Computer science—Mathematics.  I. Title. 
QA76.9.M35H867 2008
511’.1—dc22
2008040794
6048
Printed in the United States of America
12 11 10 09 08    10  9  8  7  6  5  4  3  2  1
World Headquarters
Jones and Bartlett Publishers
40 Tall Pine Drive
Sudbury, MA 01776
978-443-5000
info@jbpub.com
www.jbpub.com
Jones and Bartlett Publishers 
Canada
6339 Ormindale Way
Mississauga, Ontario L5V 1J2
Canada
Jones and Bartlett Publishers 
International
Barb House, Barb Mews
London W6 7PA
United Kingdom
48927_FMXX_Hunter.qxd  10/20/08  10:15 AM  Page v</p>
      <p>Contents
Preface xiii
How to Use This Book xvii
Chapter 1 Logical Thinking     1
1.1 Formal Logic     2
1.1.1 Connectives and Propositions     2
1.1.2 Truth Tables     4
1.1.3 Logical Equivalences     6
Exercises 1.1     9
1.2 Propositional Logic     15
1.2.1 Tautologies and Contradictions     15
1.2.2 Derivation Rules     17
1.2.3 Proof Sequences     19
1.2.4 Forward-Backward     20
Exercises 1.2     22
1.3 Predicate Logic     26
1.3.1 Predicates     26
1.3.2 Quantifiers     27
1.3.3 Translation     28
1.3.4 Negation     30
1.3.5 Two Common Constructions     32
Exercises 1.3     33
1.4 Logic in Mathematics     39
1.4.1 The Role of Definitions in Mathematics     39
1.4.2 Other Types of Mathematical Statements     41
1.4.3 Counterexamples     42
1.4.4 Axiomatic Systems     43
Exercises 1.4     47
48927_FMXX_Hunter.qxd  10/20/08  10:15 AM  Page v</p>
      <p>1.5 Methods of Proof     51
1.5.1 Direct Proofs     51
1.5.2 Proof by Contraposition     54
1.5.3 Proof by Contradiction     56
Exercises 1.5     58
Chapter 2 Relational Thinking     61
2.1 Graphs     62
2.1.1 Edges and Vertices     62
2.1.2 Terminology     63
2.1.3 Modeling Relationships with Graphs     65
Exercises 2.1     70
2.2 Sets     75
2.2.1 Membership and Containment     76
2.2.2 New Sets from Old     77
2.2.3 Identities     81
Exercises 2.2     83
2.3 Functions     86
2.3.1 Definition and Examples     87
2.3.2 One-to-One and Onto Functions     90
2.3.3 New Functions from Old     94
Exercises 2.3     96
2.4 Relations and Equivalences     100
2.4.1 Definition and Examples     100
2.4.2 Graphs of Relations     101
2.4.3 Relations vs. Functions     102
2.4.4 Equivalence Relations     103
2.4.5 Modular Arithmetic     106
Exercises 2.4      109
2.5 Partial Orderings     113
2.5.1 Definition and Examples     113
2.5.2 Hasse Diagrams     114
2.5.3 Topological Sorting     116
2.5.4 Isomorphisms     118
2.5.5 Boolean Algebras‡     121
Exercises 2.5     122
2.6 Graph Theory     127
2.6.1 Graphs: Formal Definitions     127
2.6.2 Isomorphisms of Graphs     127
vi Contents
48927_FMXX_Hunter.qxd  10/20/08  10:15 AM  Page v</p>
      <p>2.6.3 Degree Counting     129
2.6.4 Euler Paths and Circuits     130
2.6.5 Hamilton Paths and Circuits     132
2.6.6 Trees     134
Exercises 2.6     137
Chapter 3 Recursive Thinking     141
3.1 Recurrence Relations     142
3.1.1 Definition and Examples     142
3.1.2 The Fibonacci Sequence     143
3.1.3 Modeling with Recurrence Relations     144
Exercises 3.1     148
3.2 Closed-Form Solutions and Induction     152
3.2.1 Guessing a Closed-Form Solution     152     
3.2.2 Polynomial Sequences: Using Differences‡     154
3.2.3 Inductively Verifying a Solution     155
Exercises 3.2     160
3.3 Recursive Definitions     163
3.3.1 Definition and Examples     163
3.3.2 Writing Recursive Definitions     167
3.3.3 Recursive Geometry     168
3.3.4 Recursive Jokes     172
Exercises 3.3     172
3.4 Proof by Induction     176
3.4.1 The Principle of Induction     177
3.4.2 Examples     178
3.4.3 Strong Induction     182
3.4.4 Structural Induction     185
Exercises 3.4     187
3.5 Recursive Data Structures     190
3.5.1 Lists     190
3.5.2 Efficiency     195
3.5.3 Binary Search Trees Revisited     196
Exercises 3.5     198
Chapter 4 Quantitative Thinking     203
4.1 Basic Counting Techniques     204
4.1.1 Addition     204
4.1.2 Multiplication     205
Contents vii
48927_FMXX_Hunter.qxd  10/20/08  10:15 AM  Page v</p>
      <p>4.1.3 Mixing Addition and Multiplication     209
Exercises 4.1     211
4.2 Selections and Arrangements     214
4.2.1 Permutations: The Arrangement Principle     214
4.2.2 Combinations: The Selection Principle     217
4.2.3 The Binomial Theorem‡     220
Exercises 4.2     222
4.3 Counting with Functions     226
4.3.1 One-to-One Correspondences     226
4.3.2 The Pigeonhole Principle     230
4.3.3 The Generalized Pigeonhole Principle     231
4.3.4 Ramsey Theory‡     233
Exercises 4.3     233
4.4 Discrete Probability     238
4.4.1 Definitions and Examples     239
4.4.2 Applications     240
4.4.3 Expected Value     243
Exercises 4.4     245
4.5 Counting Operations in Algorithms     248
4.5.1 Algorithms     249
4.5.2 Pseudocode     249
4.5.3 Sequences of Operations     251
4.5.4 Loops     251
4.5.5 Arrays     254
4.5.6 Sorting     256
Exercises 4.5     258
4.6 Estimation     261
4.6.1 Growth of Functions     262
4.6.2 Estimation Targets     266
4.6.3 Properties of Big-Q 268
Exercises 4.6     269
Chapter 5 Analytical Thinking     273
5.1 Algorithms     274
5.1.1 More Pseudocode     274
5.1.2 Preconditions and Postconditions     276
5.1.3 Iterative Algorithms     278
5.1.4 Functions and Recursive Algorithms     279
Exercises 5.1     283
viii Contents
48927_FMXX_Hunter.qxd  10/20/08  10:15 AM  Page v</p>
      <p>5.2 Three Common Types of Algorithms     286
5.2.1 Traversal Algorithms     286
5.2.2 Greedy Algorithms     289
5.2.3 Divide-and-Conquer Algorithms     293
Exercises 5.2     296
5.3 Algorithm Complexity     301
5.3.1 The Good, the Bad, and the Average     301
5.3.2 Approximate Complexity Calculations     305
Exercises 5.3     308
5.4 Bounds on Complexity     313
5.4.1 Algorithms as Decisions     313
5.4.2 A Lower Bound     316
5.4.3 Searching an Array     317
5.4.4 Sorting     318
5.4.5 P vs. NP 319
Exercises 5.4     320
5.5 Program Verification     323
5.5.1 Verification vs. Testing     324
5.5.2 Verifying Recursive Algorithms     324
5.5.3 Searching and Sorting     327
5.5.4 Towers of Hanoi     329
Exercises 5.5     331
5.6 Loop Invariants     335
5.6.1 Verifying Iterative Algorithms     335
5.6.2 Searching and Sorting     338
5.6.3 Using Invariants to Design Algorithms     342
Exercises 5.6     344
Chapter 6 Thinking Through Applications     349
6.1 Patterns in DNA 350
6.1.1 Mutations and Phylogenetic Distance     351
6.1.2 Phylogenetic Trees     352
6.1.3 UPGMA 354
Exercises 6.1     358
6.2 Social Networks     359
6.2.1 Definitions and Terminology     360
6.2.2 Notions of Equivalence     362
6.2.3 Hierarchical Clustering     366
6.2.4 Signed Graphs and Balance     368
Contents ix
48927_FMXX_Hunter.qxd  10/20/08  10:15 AM  Page x</p>
      <p>Exercises 6.2     372
6.3 Structure of Languages     374
6.3.1 Terminology     375
6.3.2 Finite-State Machines     376
6.3.3 Recursion     379
6.3.4 Further Issues in Linguistics     383
Exercises 6.3     384
6.4 Discrete-Time Population Models     385
6.4.1 Recursive Models for Population Growth     386
6.4.2 Fixed Points, Equilibrium, and Chaos     389
6.4.3 Predator–Prey Systems     390
6.4.4 The SIR Model     393
Exercises 6.4     395
6.5 Twelve-Tone Music     398
6.5.1 Twelve-Tone Composition     398
6.5.2 Listing All Permutations     399
6.5.3 Transformations of Tone Rows     401
6.5.4 Equivalence Classes and Symmetry     402
Exercises 6.5     404
Hints, Answers, and Solutions to Selected Exercises     407
1.1 Formal Logic     407
1.2 Propositional Logic     409
1.3 Predicate Logic     410
1.4 Logic in Mathematics     412
1.5 Methods of Proof     413
2.1 Graphs     414
2.2 Sets     415
2.3 Functions     416
2.4 Relations and Equivalences     418
2.5 Partial Orderings     419
2.6 Graph Theory     421
3.1 Recurrence Relations     421
3.2 Closed-Form Solutions and Induction     423
3.3 Recursive Definitions     423
3.4 Proof by Induction     424
3.5 Recursive Data Structures     426
4.1 Basic Counting Techniques     427
4.2 Selections and Arrangements     428
x Contents
48927_FMXX_Hunter.qxd  10/20/08  10:15 AM  Page x</p>
      <p>4.3 Counting with Functions     428
4.4 Discrete Probability     429
4.5 Counting Operations in Algorithms     430
4.6 Estimation     431
5.1 Algorithms     432
5.2 Three Common Types of Algorithms     432
5.3 Algorithm Complexity     433
5.4 Bounds on Complexity     434
5.5 Program Verification     435
5.6 Loop Invariants     436
Selected References     438
Index     441
Index of Symbols     449
Contents xi
48927_FMXX_Hunter.qxd  10/20/08  10:15 AM  Page x</p>
      <p>48927_FMXX_Hunter.qxd  10/20/08  10:15 AM  Page x</p>
      <p>Preface
Introduction
Essentials of Discrete Mathematics is designed for first- or second-year Computer
Science and Math majors in discrete mathematics courses. This text is also an excel-
lent resource for students in other disciplines.  
Unlike other textbooks on the market, Essentials presents the material in a man-
ner that is suitable for a comprehensive and cohesive one-semester course. Students
will learn to think mathematically and to find mathematical structures in almost
everything.
Although most discrete mathematics texts are organized around mathematical
objects, Essentials is organized around five types of mathematical thinking: logical,
relational, recursive, quantitative, and analytical.  To reinforce this approach, graphs
are introduced early and referred to throughout the text, providing a richer context
for examples and applications. 
Applications are provided throughout the text, and the final chapter explores
several uses of discrete mathematical thinking in a variety of disciplines. Case stud-
ies from biology, sociology, linguistics, economics, and music can be used as the
basis for independent study or undergraduate research projects. Every chapter has
its own set of exercises, which are designed to develop the skills of reading and
writing proofs.
Synopsis of the Chapters
Chapter 1 introduces the reader to and emphasizes the importance of Logical
Thinking. The chapter explores logic formally (symbolically), and then teaches the
student to consider how logic is used in mathematical statements and arguments.
The chapter begins with an introduction to formal logic, focusing on the importance
of notation and symbols in mathematics, and then explains how formal logic can be
applied. The chapter closes with a look at the different ways that proofs are con-
structed in mathematics.
As most mathematical problems contain different objects that are related to
each other, Chapter 2 considers Relational Thinking. Finding the relationships
among objects often is the first step in solving a mathematical problem. The math-
ematical structures of sets, relations, functions, and graphs describe these relation-
ships, and thus this chapter focuses on exploring ways to use these structures to
48927_FMXX_Hunter.qxd  10/20/08  10:15 AM  Page x</p>
      <p>model mathematical relationships. Graph theory is introduced early and used
throughout the chapter.
Chapter 3 describes Recursive Thinking. Many objects in nature have recur-
sive structures:  a branch of a tree looks like a smaller tree; an ocean swell has the
same shape as the ripples formed by its splashes; an onion holds a smaller onion
under its outer layer. Finding similar traits in mathematical objects unleashes a pow-
erful tool. Chapter 3 begins by studying simple recurrence relations and then con-
siders other recursive structures in a variety of contexts. Students also will cover
recursive definitions, including how to write their own, and will extend the tech-
nique of induction to prove facts about recursively defined objects.
Chapter 4 engages the reader in Quantitative Thinking, as many problems in
mathematics, computer science, and other disciplines involve counting the elements
of a set of objects. The chapter examines the different tools used to count certain
types of sets and teaches students to think about problems from a quantitative point
of view. After exploring the different enumeration techniques, students will consid-
er applications, including a first look at how to count operations in an algorithm.
Chapter 4 also will practice the art of estimation, a valuable skill when precise enu-
meration is difficult.
Chapter 5 explores Analytical Thinking. Many applications of discrete math-
ematics are algorithms, and thus it is essential to be able to understand and analyze
them. This chapter builds on the four foundations of thinking covered in the first
four chapters, applying quantitative and relational thinking to the study of algorithm
complexity, and then applying logical and recursive thinking to the study of pro-
gram correctness. Finally, students will study mathematical ways to determine the
accuracy and efficiency of algorithms.
The final chapter, Thinking Through Applications, examines different ways
that discrete mathematical thinking can be applied:  patterns in DNA, social net-
works, the structure of language, population models, and twelve-tone music.
Supplements
Instructor’s Solutions Manual
PowerPoint Slide Presentation
Acknowledgments
I would like to thank the following reviewers for their valuable input and sugges-
tions:
Peter B. Henderson; Butler University
Uwe Kaiser; Boise State University
Miklos Bona; University of Florida
Brian Hopkins; St. Peter’s College
Frank Ritter; The Pennsylvania State University
Bill Marion; Valparaiso University
xiv Preface
48927_FMXX_Hunter.qxd  10/20/08  10:15 AM  Page xv</p>
      <p>Also, I would like to express my deep appreciation to the team at Jones and
Bartlett Publishers. In particular I would like to thank:  my Acquisitions Editor, Tim
Anderson; Amy Rose, Production Director; Jennifer Bagdigian, Production
Manager; Katherine Macdonald, Production Editor; Melissa Elmore, Associate
Production Editor; and Melissa Potter, Editorial Assistant.
David Hunter
Westmont College
Preface xv
48927_FMXX_Hunter.qxd  10/20/08  10:15 AM  Page xv</p>
      <p>48927_FMXX_Hunter.qxd  10/20/08  10:15 AM  Page xv</p>
      <p>✐
✐
“48927˙CH01˙Hunter” — 2008/10/15 — 5:01 — page 1 — #1
✐
✐
✐
✐
✐
✐
Chapter1
LogicalThinking
Mathematicians are in the business of stating things precisely. When you read
a mathematical statement, you are meant to take every word seriously; good
mathematical language conveys a clear, unambiguous message. In order to read
Figure 1.1 Symbolsare an important part of the language of mathematics.
1</p>
      <p>✐
✐
“48927˙CH01˙Hunter” — 2008/10/15 — 5:01 — page 2 — #2
✐
✐
✐
✐
✐
✐
2 Chapter 1 a73 Logical Thinking
and write mathematics, you must practice the art of logical thinking. The goal
of thischapter isto help you communicate mathematically by understanding
the basics of logic.
A word of warning: mathematical logic can be diﬃcult—especially the ﬁrst
time you see it. This chapter begins with the study of formal, or symbolic, logic,
and then appliesthisstudy to the language of mathematics. Expect thingsto
be a bit foggy at ﬁrst, but eventually (we hope) the fog will clear. When it
does, mathematical statements will start making more sense to you.
1.1 FormalLogic
Notation isan important part of mathematical language. Mathematicians’
chalkboards are often ﬁlled with an assortment of strange characters and sym-
bols; such a display can be intimidating to the novice, but there’s a good reason
for communicating thisway. Often the act of reducing a problem to symbolic
language helpsussee what isreally going on. Instead of operating in the fuzzy
world of prose, we translate a problem to notation and then perform well-deﬁned
symbolic manipulations on that notation. This is the essence of the powerful
tool calledformalism. In thissection, we explore how a formal approach to logic
can help usavoid errorsin reasoning.
A note on terminology: we’ll use the wordformal to describe a process that
relies on manipulating notation. Often people use this word to mean “rigorous,”
but that’s not our intention. A formal argument can be rigorous, but so can an
argument that does not rely on symbols.
One nice feature of formalism is that it allows you to work without having
to think about what all the symbols mean. In this sense, formal logic is really
“logical not-thinking.” Why isthisan advantage? Formal calculationsare less
prone to error. You are already familiar with thisphenomenon: much of the
arithmetic you learned in school was formal. You have a well-deﬁned symbolic
algorithm for multiplying numbersusing pencil and paper, and you can quite
eﬀectively multiply three-digit numberswithout thinking much about what you
are really doing. Of course, formalism is pointless if you don’t know what you
are doing; at the end of any formal calculation, it isimportant to be able to
interpret the results.
1.1.1 ConnectivesandPropositions
In order to formalize logic, we need a system for translating statements into
symbols. We’ll start with a precise deﬁnition of statement.
Deﬁnition 1.1 A statement (also known as a proposition) isa declarative
sentence that is either true or false, but not both.</p>
      <p>✐
✐
“48927˙CH01˙Hunter” — 2008/10/15 — 5:01 — page 3 — #3
✐
✐
✐
✐
✐
✐
1.1 Formal Logic 3
The following are examples of statements:
• 7isodd.
• 1+1=4
• If it israining, then the ground iswet.
• Our professor is from Mars.
Note that we don’t need to be able to decide whether a statement is true or
false in order for it to be a statement. Either our professor is from Mars, or our
professor is not from Mars, though we may not be sure which is the case.
How can a declarative sentence fail to be a statement? There are two main
ways. A declarative sentence may contain an unspeciﬁed term:
x iseven.
In thiscase, x iscalled a freevariable. The truth of the sentence depends on
the value of x, so if that value is not speciﬁed, we can’t regard this sentence as
a statement. A second type of declarative non-statement can happen when a
sentence is self-referential:
Thissentence isfalse.
We can’t decide whether or not the above sentence is true. If we say it is true,
then it claims to be false; if we say it is false, then it appears to be true.
Often, a complicated statement consists of several simple statements joined
together by wordssuch as“and,” “or,” “if ... then,” etc. These connecting
wordsare represented by the ﬁve logicalconnectives shown in Table 1.1. Logical
connectives are useful for decomposing compound statements into simpler ones,
because they highlight important logical properties of a statement.
In order to use a formal system for logic, we must be able to translate be-
tween a statement in English and its formal counterpart. We do this by assigning
letters for simple statements, and then building expressions with connectives.
Name Symbol
and ∧
or ∨
not ¬
implies(if ... then) →
if and only if ↔
Table 1.1 The ﬁve logical connectives.</p>
      <p>✐
✐
“48927˙CH01˙Hunter” — 2008/10/15 — 5:01 — page 4 — #4
✐
✐
✐
✐
✐
✐
4 Chapter 1 a73 Logical Thinking
Example 1.1 If p is the statement “you are wearing shoes” and q isthe state-
ment “you can’t cut your toenails,” then
p→q
represents the statement, “If you are wearing shoes, then you can’t cut your
toenails.” We may choose to express this statement diﬀerently in English: “You
can’t cut your toenails if you are wearing shoes,” or “Wearing shoes makes it
impossible to cut your toenails.” The statement ¬q translatesliterally as“It is
not the case that you can’t cut your toenails.” Of course, in English, we would
prefer to say simply, “You can cut your toenails,” but this involves using logic,
as we will see in the next section.
1.1.2 TruthTables
We haven’t ﬁnished setting up our formal system for logic because we haven’t
been speciﬁc about the meaning of the logical connectives. Of course, the names
of each connective suggest how they should be used, but in order to make
statements with mathematical precision, we need to know exactly what each
connective means.
Deﬁning the meaning of a mathematical symbol is harder than it might
seem. Even the + symbol from ordinary arithmetic is problematic. Although
we all have an intuitive understanding of addition—it describes how to combine
two quantities—it ishard to expressthisconcept in wordswithout appealing
to our intuition. What does“combine” mean, exactly? What are “quantities,”
really?
One simple, but obviously impractical, way to deﬁne the + sign would be
to list all possible addition problems, as in Table 1.2. Of course, such a table
could never end, but it would, in theory, give usa precise deﬁnition of the +
sign.
x y x+y
0 0 0
0 1 1
1 0 1
1 1 2
2 1 3
1 2 3
.
.
.
.
.
.
.
.
.
Table 1.2 Deﬁning the + sign by listing all possible addition problems would
require an inﬁnite table.</p>
      <p>✐
✐
“48927˙CH01˙Hunter” — 2008/10/15 — 5:01 — page 5 — #5
✐
✐
✐
✐
✐
✐
1.1 Formal Logic 5
The situation in logic is easier to handle. Any statement has two possible
values: true (T) or false (F). So when we use variables such as p or q for
statementsin logic, we can think of them asunknownsthat can take one of
only two values: T or F. This makes it possible to deﬁne the meaning of each
connective using tables; instead of inﬁnitely many values for numbers x and y,
we have only two choicesfor each variable p and q.
We will now stipulate the meaning of each logical connective by listing
the T/F values for every possible case. The simplest example is the “not”
connective, ¬.Ifp istrue, then ¬p should be false, and viceversa.
p ¬p
T F
F T
Thistable of valuesiscalled a truthtable; it deﬁnesthe T/F valuesfor the
connective.
The “and” and “or” connectivesare deﬁned by the following truth tables.
Since we have two variables, and each can be either T or F, we need four cases.
p q p∧q
T T T
T F F
F T F
F F F
p q p∨q
T T T
T F T
F T T
F F F
The deﬁnition of the “and” connective ∧ iswhat you would expect: in order
for p∧q to be true, p must be true and q must be true. The “or” connective
∨ is a little less obvious. Notice that our deﬁnition stipulates that p∨q istrue
whenever p istrue, or q istrue, or both are true. Thiscan be diﬀerent from the
way “or” is used in everyday speech. When you are oﬀered “soup or salad” in
a restaurant, your server isn’t expecting you to say “both.”
The “if and only if” connective says that two statements have exactly the
same truth values. Thus, its truth table is as follows.
p q p↔q
T T T
T F F
F T F
F F T
Sometimesauthorswill write “iﬀ” asan abbreviation for “if and only if.”</p>
      <p>✐
✐
“48927˙CH01˙Hunter” — 2008/10/15 — 5:01 — page 6 — #6
✐
✐
✐
✐
✐
✐
6 Chapter 1 a73 Logical Thinking
The “implies” connective has the least intuitive deﬁnition.
p q p→q
T T T
T F F
F T T
F F T
To understand the motivation for this deﬁnition, recall Example 1.1. In order
to demonstrate that the statement
p → q = “If you are wearing shoes, then you can’t cut your toe-
nails.”
is false, you would have to be able to cut your toenails while wearing shoes.
In any other situation, you would have to concede that the statement is not
false (and if a statement is not false, it must be true). If you are not wearing
shoes, then maybe you can cut your toenails or maybe you can’t, for some other
reason. This doesn’t contradict the statement p→q.
Put another way, if you live in a world without shoes, then the statement
is vacuously true; since you can never actually wear shoes, it isn’t false to say
that“If you are wearing shoes,” then anything is possible. This explains the
last two lines of the truth table; if p isfalse, then p→q istrue, no matter what
q is.
1.1.3 LogicalEquivalences
Deﬁnition 1.2 Two statements are logicallyequivalent if they have the same
T/F values for all cases, that is, if they have the same truth tables.
There are some logical equivalences that come up often in mathematics,
and also in life in general.
Example 1.2 Consider the following theorem from high school geometry.
If a quadrilateral has a pair of parallel sides, then it has a pair of
supplementary angles.
1
1. Recall that two angles are supplementary if their angle measures sum to 180
◦
.</p>
      <p>✐
✐
“48927˙CH01˙Hunter” — 2008/10/15 — 5:01 — page 7 — #7
✐
✐
✐
✐
✐
✐
1.1 Formal Logic 7
Thistheorem isof the form p → q, where p isthe statement that the quadri-
lateral has a pair of parallel sides, and q isthe statement that the quadrilateral
has a pair of supplementary angles.
We can state a diﬀerent theorem, represented by ¬q →¬p.
If a quadrilateral does not have a pair of supplementary angles, then
it does not have a pair of parallel sides.
We know that this second theorem is logically equivalent to the ﬁrst because
the formal statement p → q islogically equivalent to the formal statement
¬q →¬p, as the following truth table shows.
p q p→q ¬q ¬p ¬q →¬p
T T T F F T
T F F T F F
F T T F T T
F F T T T T
Notice that the column for p → q matchesthe column for ¬q →¬p. Since the
ﬁrst theorem is a true theorem from geometry, so is the second.
Now consider a diﬀerent variation on this theorem.
If a quadrilateral has a pair of supplementary angles, then it has a
pair of parallel sides.
Thisstatement isof the form q → p. But the following truth table shows that
q →p isnot logically equivalent to p→q, because the T/F values are diﬀerent
in the second and third rows.
p q q →p
T T T
T F T
F T F
F F T
In fact, this last statement is not true, in general, in geometry. (Can you draw
an example of a quadrilateral for which it failsto be true?)
The statement ¬q →¬p iscalled the contrapositive of p → q, and the
statement q → p iscalled the converse. The truth tablesabove prove that, for
any statement s, the contrapositive of s islogically equivalent to s, while the
converse of s may not be.</p>
      <p>✐
✐
“48927˙CH01˙Hunter” — 2008/10/15 — 5:01 — page 8 — #8
✐
✐
✐
✐
✐
✐
8 Chapter 1 a73 Logical Thinking
There are lots of situations where assuming the converse can cause trouble.
For example, suppose that the following statement is true.
If a company isnot participating in illegal accounting practices,
then an audit will turn up no evidence of wrongdoing.
It is certainly reasonable to assume this, since there couldn’t be evidence of
wrongdoing if no such wrongdoing exists. However, the converse is probably
not true:
If an audit turnsup no evidence of wrongdoing, then the company
isnot participating in illegal accounting practices.
After all, it is possible that the auditors missed something.
At thispoint you might object that formal logic seemslike a lot of trouble
to go through just to verify deductions like this last example. This sort of thing
is just common sense, right? Well, maybe. But something that appears obvious
to you may not be obvious to someone else. Furthermore, our system of formal
logic can deal with more complicated situations, where our common sense might
fail us. The solution to the next example uses formal logic. Before you look at
this solution, try to solve the problem using “common sense.” Although the
formal approach takesa little time, it resolvesany doubt you might have about
your own reasoning process.
Example 1.3 If Aaron islate then Bill islate, and, if both Aaron and Bill
are late, then class is boring. Suppose that class is not boring. What can you
conclude about Aaron?
Solution: Let’s begin by translating the ﬁrst sentence into the symbols of logic,
using the following statements.
p = Aaron islate.
q = Bill islate.
r = Class is boring.
Let S be the statement “If Aaron is late then Bill is late, and, if both Aaron and
Bill are late, then class is boring.” In symbols, S translates to the following.
S =(p→q)∧[(p∧q) →r]
Now let’sconstruct a truth table for S. We do thisby constructing truth tables
for the diﬀerent partsof S, starting inside the parentheses and working our way
out.</p>
      <p>✐
✐
“48927˙CH01˙Hunter” — 2008/10/15 — 5:01 — page 9 — #9
✐
✐
✐
✐
✐
✐
1.1 Formal Logic 9
Row # p q r p→q p∧q (p∧q) →r S
1. T T T T T T T
2. T T F T T F F
3. T F T F F T F
4. T F F F F T F
5. F T T T F T T
6. F T F T F T T
7. F F T T F T T
8. F F F T F T T
You should check that the last column is the result of “and-ing” the column
for p→q with the column for (p∧q) →r.
We are interested in the possible values of p. It isgiven that S istrue, so we
can eliminate rows2, 3, and 4, the rowswhere S is false. If we further assume
that classisnot boring, we can also eliminate the rowswhere r istrue, namely
the odd-numbered rows. The rows that remain are the only possible T/F values
for p, q, and r: rows 6 and 8. In both of these rows, p is false. In other words,
Aaron isnot late. ♦
Exercises 1.1
1. Let the following statements be given.
p = “There iswater in the cylinders.”
q = “The head gasket is blown.”
r = “The car will start.”
(a) Translate the following statement into symbols of formal logic.
If the head gasket is blown and there’s water in the cylin-
ders, then the car won’t start.
(b) Translate the following formal statement into everyday English.
r →¬(q∨p)
2. Let the following statements be given.
p = “You are in Seoul.”
q = “You are in Kwangju.”
r = “You are in South Korea.”</p>
      <p>✐
✐
“48927˙CH01˙Hunter” — 2008/10/15 — 5:01 — page 10 — #10
✐
✐
✐
✐
✐
✐
10 Chapter 1 a73 Logical Thinking
(a) Translate the following statement into symbols of formal logic.
If you are not in South Korea, then you are not in Seoul or
Kwangju.
(b) Translate the following formal statement into everyday English.
q → (r∧¬p)
3. Let the following statements be given.
p = “You can vote.”
q = “You are under 18 yearsold.”
r = “You are from Mars.”
(a) Translate the following statement into symbols of formal logic.
You can’t vote if you are under 18 yearsold or you are from
Mars.
(b) Give the converse of this statement in the symbols of formal logic.
(c) Give the converse in English.
4. Let s be the following statement.
If you are studying hard, then you are staying up late at night.
(a) Give the converse of s.
(b) Give the contrapositive of s.
5. Let s be the following statement.
If it israining, then the ground iswet.
(a) Give the converse of s.
(b) Give the contrapositive of s.
6. Give an example of a quadrilateral that shows that the converse of the
following statement is false.
If a quadrilateral has a pair of parallel sides, then it has a pair
of supplementary angles.
7. We say that two ordered pairs (a,b) and (c,d) are equal when a = c and
b = d. Let s be the following statement.
If (a,b)=(c,d), then a = c.
(a) Isthisstatement true?</p>
      <p>✐
✐
“48927˙CH01˙Hunter” — 2008/10/15 — 5:01 — page 11 — #11
✐
✐
✐
✐
✐
✐
1.1 Formal Logic 11
(b) Write down the converse of s.
(c) Isthe converse of s true? Explain.
8. Give an example of a true if–then statement whose converse is also true.
9. Show that p ↔ q islogically equivalent to ( p → q)∧(q → p) using truth
tables.
10. Use truth tables to establish the following equivalences.
(a) Show that ¬(p∨q) islogically equivalent to ¬p∧¬q.
(b) Show that ¬(p∧q) islogically equivalent to ¬p∨¬q.
These equivalences are known asDeMorgan’slaws, after the 19th century
logician Augustus De Morgan.
11. Use truth tables to show that (a∨b) ∧ (¬(a∧b)) islogically equivalent
to a ↔¬b. (Thisarrangement of T/F valuesissometimescalled the
exclusiveor of a and b.)
12. Use a truth table to prove that the statement
[(p∨q)∧(¬p)] →q
isalwaystrue, no matter what p and q are.
13. Let the following statements be given.
p = Andy ishungry.
q = The refrigerator isempty.
r = Andy ismad.
(a) Use connectives to translate the following statement into formal
logic.
If Andy ishungry and the refrigerator isempty, then Andy
ismad.
(b) Construct a truth table for the statement in part (a)
(c) Suppose that the statement given in part (a) is true, and suppose
also that Andy isnot mad and the refrigerator isempty. IsAndy
hungry? Explain how to justify your answer using the truth table.
14. Use truth tables to prove the following distributiveproperties for propo-
sitional logic.
(a) p∧(q∨r) islogically equivalent to ( p∧q)∨(p∧r).
(b) p∨(q∧r) islogically equivalent to ( p∨q)∧(p∨r).</p>
      <p>✐
✐
“48927˙CH01˙Hunter” — 2008/10/15 — 5:01 — page 12 — #12
✐
✐
✐
✐
✐
✐
12 Chapter 1 a73 Logical Thinking
15. Use truth tables to prove theassociativeproperties for propositional logic.
(a) p∨(q∨r) islogically equivalent to ( p∨q)∨r.
(b) p∧(q∧r) islogically equivalent to ( p∧q)∧r.
16. Mathematicians say that “statement P is stronger than statement Q”if
Q istrue whenever P is true, but not conversely. (In other words, “P is
stronger than Q” meansthat P → Q isalwaystrue, but Q → P isnot
true, in general.) Use truth tables to show the following.
(a) a∧b isstronger than a.
(b) a isstronger than a∨b.
(c) a∧b isstronger than a∨b.
(d) b isstronger than a→b.
17. Suppose Q is a quadrilateral. Which statement is stronger?
• Q isa square.
• Q isa rectangle.
Explain.
18. Which statement is stronger?
• Manchester United is the best football team in England.
• Manchester United is the best football team in Europe.
Explain.
19. Which statement is stronger?
• n isdivisible by 3.
• n isdivisible by 12.
Explain.
20. Mathematicianssay that “Statement P isa suﬃcientcondition for state-
ment Q”ifP → Q istrue. In other words, in order to know that Q is
true, it issuﬃcient to know that P istrue. Let x be an integer. Give a
suﬃcient condition on x for x/2 to be an even integer.
21. Mathematicianssay that “Statement P isa necessarycondition for state-
ment Q”ifQ → P istrue. In other words, in order for Q to be true, it
is necessary that P must be true. Let n≥ 1 be a natural number. Give a
necessary but not suﬃcient condition on n for n+ 2 to be prime.</p>
      <p>✐
✐
“48927˙CH01˙Hunter” — 2008/10/15 — 5:01 — page 13 — #13
✐
✐
✐
✐
✐
✐
1.1 Formal Logic 13
22. Write the statement “P is necessary and suﬃcient for Q” in the symbols
of formal logic, using as few connectives as possible.
23. Often a complicated expression in formal logic can be simpliﬁed. For
example, consider the statement S =(p∧q)∨(p∧¬q).
(a) Construct a truth table for S.
(b) Find a simpler expression that is logically equivalent to S.
24. The NAND connective ↑ isdeﬁned by the following truth table.
p q p↑q
T T F
T F T
F T T
F F T
Use truth tables to show that p ↑ q islogically equivalent to ¬(p∧q).
(Thisexplainsthe name NAND: Not AND.)
25. The NAND connective is important because it is easy to build an elec-
tronic circuit that computes the NAND of two signals (see Figure 1.2).
Such a circuit iscalled a logicgate. Moreover, it is possible to build logic
gatesfor the other logical connectivesentirely out of NAND gates. Prove
this fact by proving the following equivalences, using truth tables.
(a) (p↑q) ↑ (p↑q) islogically equivalent to p∧q.
(b) (p↑p) ↑ (q ↑q) islogically equivalent to p∨q.
(c) p↑ (q ↑q) islogically equivalent to p→q.
26. Write ¬p in termsof p and ↑.
p
p ↑ q
q
V
cc
Figure 1.2 A NAND gate can be built with just two transistors.</p>
      <p>✐
✐
“48927˙CH01˙Hunter” — 2008/10/15 — 5:01 — page 14 — #14
✐
✐
✐
✐
✐
✐
14 Chapter 1 a73 Logical Thinking
27. A technician suspects that one or more of the processors in a distributed
system is not working properly. The processors, A, B, and C, are all
capable of reporting information about the status (working or not work-
ing) of the processors in the system. The technician is unsure whether a
processor is really not working, or whether the problem is in the status
reporting routines in one or more of the processors. After polling each
processor, the technician receives the following status reports.
• Processor A reports that Processor B is not working and processor
C isworking.
• Processor B reportsthat A isworking if and only if B isworking.
• Processor C reports that at least one of the other two processors is
not working.
Help the technician by answering the following questions.
(a) Leta =“A isworking,” b =“B isworking,” and c =“C isworking.”
Write the three statusreportsin termsof a, b, and c, using the sym-
bolsof formal logic.
(b) Complete the following truth table.
a b c A’sreport B’sreport C’sreport
T T T
T T F
T F T
T F F
F T T
F T F
F F T
F F F
(c) Assuming that all of the status reports are true, which processor(s)
is/are working?
(d) Assuming that all of the processors are working, which status re-
port(s) is/are false?
(e) Assuming that a processor’s status report is true if and only if the
processor is working, what is the status of each processor?</p>
      <p>✐
✐
“48927˙CH01˙Hunter” — 2008/10/15 — 5:01 — page 15 — #15
✐
✐
✐
✐
✐
✐
1.2 Propositional Logic 15
1.2 PropositionalLogic
After working through the exercisesof the previoussection, you may have
noticed a serious limitation of the truth table approach. Each time you add
a new statement to a truth table, you must double the number of rows. This
makes truth table analysis unwieldy for all but the simplest examples.
In this section we will develop a system of rules for manipulating formulas
in symbolic logic. This system, called the propositionalcalculus, will allow us
to make logical deductions formally. There are at least three reasons for doing
this.
1. These formal methods are useful for analyzing complex logical problems,
especially where truth tables are impractical.
2. The derivation rules we will study are commonly used in mathematical
discourse.
3. The system of derivation rules and proof sequences is a simple example
of mathematical proof.
Of these three, the last is the most important. The mechanical process of writ-
ing proof sequencesin propositional calculuswill prepare usfor writing more
complicated proofsin other areasof mathematics.
1.2.1 TautologiesandContradictions
There are some statements in formal logic that are always true, no matter what
the T/F valuesof the component statementsare. For example, the truth table
for (p∧q) →p isasfollows.
p q p∧q (p∧q) →p
T T T T
T F F T
F T F T
F F F T
Such a statement is called a tautology, and we write
(p∧q) ⇒p
to indicate thisfact. The notation A⇒B meansthat the statement A→B is
true in all cases; in other words, the truth table for A→B isall T’s. Similarly,
the ⇔ symbol denotes a tautology containing the ↔ connective.</p>
      <p>✐
✐
“48927˙CH01˙Hunter” — 2008/10/15 — 5:01 — page 16 — #16
✐
✐
✐
✐
✐
✐
16 Chapter 1 a73 Logical Thinking
Example 1.4 In Exercise 1.1.10 you proved the following tautologies.
(a) ¬(p∨q) ⇔¬p∧¬q.
(b) ¬(p∧q) ⇔¬p∨¬q.
When a tautology isof the form ( C ∧D) ⇒E, we often prefer to write
C
D
bracerightBigg
⇒E
instead. Thisnotation highlightsthe fact that if you know both C and D, then
you can conclude E. The use of the ∧ connective isimplicit.
Example 1.5 Use a truth table to prove the following.
p
p→q
bracerightBigg
⇒q
Solution:LetS be the statement [p∧(p→q)] →q. We construct our truth table
by building up the partsof S, working from inside the parentheses outward.
p q p→q p∧(p→q) S
T T T T T
T F F F T
F T T F T
F F T F T
Since the column for S isall T’s, thisprovesthat S isa tautology. ♦
The tautology in Example 1.5 isknown as modusponens, which isLatin
for “aﬃrmative mode.” Thisconcept goesback at least asfar asthe Stoic
philosophers of ancient Greece, who stated it as follows.
If the ﬁrst, then the second;
but the ﬁrst;
therefore the second.
In the exercises, you will have the opportunity to prove a related result called
modus tollens (“denial mode”). In the symbolsof logic, thistautology isas
follows.
¬q
p→q
bracerightBigg
⇒¬p
There are also statements in formal logic that are never true. A statement
whose truth table containsall F’siscalled a contradiction.</p>
      <p>✐
✐
“48927˙CH01˙Hunter” — 2008/10/15 — 5:01 — page 17 — #17
✐
✐
✐
✐
✐
✐
1.2 Propositional Logic 17
Example 1.6 Use a truth table to show that p∧¬p isa contradiction.
Solution:
p ¬p p∧¬p
T F F
F T F
In other words, a statement and its negation can never both be true. ♦
A statement in propositional logic that is neither a tautology nor a con-
tradiction iscalled a contingency. A contingency hasboth T’sand F’sin its
truth table, so itstruth is“contingent” on the T/F valuesof itscomponent
statements. For example, p∧q, p∨q, and p→q are all contingencies.
1.2.2 DerivationRules
Tautologies are important because they show how one statement may be logi-
cally deduced from another. For example, suppose we know that the following
statements are true.
Our professor does not own a spaceship.
If our professor is from Mars, then our professor owns a spaceship.
We can apply themodustollens tautology to deduce that “Our professor is not
from Mars.” Thisisa valid argument, or derivation, that allowsusto conclude
this last statement given the ﬁrst two.
Every tautology can be used as a rule to justify deriving a new statement
from an old one. There are two typesof derivation rules: equivalence rulesand
inference rules. Equivalence rules describe logical equivalences, while inference
rules describe when a weaker statement can be deduced from a stronger state-
ment. The equivalence rulesgiven in Table 1.3 could all be checked using truth
tables. If A and B are statements (possibly comprised of many other statements
joined by connectives), then the tautology A⇔B isanother way of saying that
A and B are logically equivalent.
2
An equivalence rule of the form A⇔B can do three things:
1. Given A, deduce B.
2. Given B, deduce A.
2. A word on notation: We typically use p,q,r,... to stand for simple statements, and we
use A,B,C,... to denote statements that are (possibly) made up of simple statements and
logical connectives. This convention, however, is purely expository, and doesn’t signify any
diﬀerence in meaning.</p>
      <p>✐
✐
“48927˙CH01˙Hunter” — 2008/10/15 — 5:01 — page 18 — #18
✐
✐
✐
✐
✐
✐
18 Chapter 1 a73 Logical Thinking
3. Given a statement containing statement A, deduce the same statement,
but with statement A replaced by statement B.
The third option isa form of substitution. For example, given the following
statement,
If Micah isnot sick and Micah isnot tired, then Micah can play.
we can deduce the following using De Morgan’s laws.
If it isnot the case that Micah issick or tired, then Micah can play.
In addition to equivalence rules, there are also inference rules for proposi-
tional logic. Unlike equivalence rules, inference rules only work in one direction.
An inference rule of the form A⇒B allowsyou to do only one thing:
1. Given A, deduce B.
In other words, you can conclude a weaker statement, B, if you have already
established a stronger statement, A. For example,modustollens isan inference
rule: the weaker statement
B = “Our professor is not from Mars.”
follows from the stronger statement
A = “Our professor does not own a spaceship, and if our professor
is from Mars, then our professor owns a spaceship.”
If A istrue, then B must be true, but not vice versa. (Our professor might
own a spaceship and be from Jupiter, for instance.) Table 1.4 lists some useful
inference rules, all of which can be veriﬁed using truth tables.
Equivalence Name
p⇔¬¬p double negation
p→q ⇔¬p∨q implication
¬(p∧q) ⇔¬p∨¬q De Morgan’slaws
¬(p∨q) ⇔¬p∧¬q
p∨q ⇔q∨p commutativity
p∧q ⇔q∧p
p∧(q∧r) ⇔ (p∧q)∧r associativity
p∨(q∨r) ⇔ (p∨q)∨r
Table 1.3 Equivalence Rules</p>
      <p>✐
✐
“48927˙CH01˙Hunter” — 2008/10/15 — 5:01 — page 19 — #19
✐
✐
✐
✐
✐
✐
1.2 Propositional Logic 19
Inference Name
p
q
bracerightBigg
⇒p∧q conjunction
p
p→q
bracerightBigg
⇒q modusponens
¬q
p→q
bracerightBigg
⇒¬p modustollens
p∧q ⇒p simpliﬁcation
p⇒p∨q addition
Table 1.4 Inference Rules
1.2.3 ProofSequences
We now have enough tools to derive some new tautologies from old ones. A
proofsequence is a sequence of statements and reasons to justify an assertion
of the form A ⇒ C. The ﬁrst statement, A, isgiven.
3
The proof sequence can
then list statements B
1
,B
2
,B
3
,..., etc., aslong aseach new statement can be
derived from a previous statement (or statements) using some derivation rule.
Of course, this sequence of statements must culminate in C, the statement we
are trying to prove, given A.
Example 1.7 Write a proof sequence for the assertion
p
p→q
q →r





⇒r.
Solution:
Statements Reasons
1. p given
2. p→q given
3. q →r given
4. q modusponens,1,2
5. r modusponens,4,3
♦
3. Often there are several given statements.</p>
      <p>✐
✐
“48927˙CH01˙Hunter” — 2008/10/15 — 5:01 — page 20 — #20
✐
✐
✐
✐
✐
✐
20 Chapter 1 a73 Logical Thinking
Every time we prove something, we get a new inference rule. The rules in
Table 1.4 are enough to get us started, but we should feel free to use proven
assertions in future proofs. For example, the assertion proved in Example 1.7
illustrates the transitive property of the → connective.
Another thing to notice about Example 1.7 isthat it waspretty easy—
we just had to apply modus ponens twice. Compare thisto the truth table
approach: the truth table for
[p∧(p→q)∧(q →r)] →r
would consist of eight rows and several columns. Truth tables are easier to do,
but they can be much more tedious.
Proof sequencesshould remind you of the typesof proofsyou did in high
school geometry. The rules are simple: start with the given, see what you can
deduce, end with what you are trying to prove. Here’sa harder example.
Example 1.8 Prove:
p∨q
¬p
bracerightBigg
⇒q
Solution:
Statements Reasons
1. p∨q given
2. ¬p given
3. ¬(¬p)∨q double negation, 1
4. ¬p→q implication, 3
5. q modusponens,4,2
♦
Notice that in step 3 of this proof, we used one of the equivalence rules
(double negation) to make a substitution in the formula. This is allowed: since
¬(¬p) islogically equivalent to p, it can take the place of p in any formula.
1.2.4 Forward–Backward
If you are having trouble coming up with a proof sequence, try the ‘‘forward–
backward” approach: consider statements that are one step forward from the
given, and also statements that are one step backward from the statement you
are trying to prove. Repeat this process, forging a path of deductions forward
from the given and backward from the ﬁnal statement. If all goes well, you
will discover a way to make these paths meet in the middle. The next example
illustrates this technique.</p>
    </div>
  </body>
</html>